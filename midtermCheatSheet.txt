Registers
• Control: dictates current state of the machine
• Status: indicates status of operation (error, overflow, etc.)
• MAR: Memory Address Register (holds address of memory 
location currently referenced)
• MDR: Memory Data Register: holds data being sent to or 
retrieved from the memory address in the MAR
• IP: Instruction Pointer (holds memory address of next 
instruction)
• IR: Instruction Register (holds current machine instruction)
• Operand_1, Operand_2, Result: ALU registers (for calculations 
and comparisons)
• General: fast temporary storage

Instruction Execution Cycle
1. Fetch next instruction (at address in IP) into IR.
2. Increment IP to point to next instruction.
3. Decode instruction in IR
4. If instruction requires memory access, 
A. Determine memory address.
B. Fetch operand from memory into a CPU register, or send 
operand from a CPU register to memory.
5. Execute micro-program for instruction
6. Go to step 1 (unless the “halt” instruction has been 
executed)

Ki = 210, Mi = 220, Gi = 230


• ReadString - Reads a string from keyboard, terminated 
by the Enter key.
– Preconditions: OFFSET of memory destination in EDX
 Size of memory destination in ECX
– Postconditions: String entered is in memory
 Length of string entered is in EAX

SIGNED todo add unsigned to this
cmp dest, source
• JE jump if destination = source
• JL jump if destination < source
• JG jump if destination > source
• JLE jump if destination <= source
• JGE jump if destination >= source
• JNE jump if destination not = source

IMUL
Instruction Form    Condition for Clearing CF and OF
   r/m8                AL := sign-extend of AL to 16 bits
   r/m16               AX := sign-extend of AX to 32 bits
   r/m32               EDX:EAX := sign-extend of EAX to 32 bits
   r16,r/m16           Result exactly fits within r16
   r/32,r/m32          Result exactly fits within r32
   r16,r/m16,imm16     Result exactly fits within r16
   r32,r/m32,imm32     Result exactly fits within r32

Dividend / Divisor =    Quotient     remainder
edx:eax	  div reg/mem	  eax		edx


binary decimal points
0.0000,0.0000
0.0001,0.0625
0.0010,0.1250
0.0011,0.1875
0.0100,0.2500
0.0101,0.3125
0.0110,0.3750
0.0111,0.4375
0.1000,0.5000
0.1001,0.5625
0.1010,0.6250
0.1011,0.6875
0.1100,0.7500
0.1101,0.8125
0.1110,0.8750
0.1111,0.9375

• The CALL instruction calls a procedure 
• Pushes the offset of the next instruction onto the 
stack
• copies the address of the called procedure into EIP

• A push operation
• decrements the stack pointer by 4 (or 2)
• copies a value into the location pointed to by the 
stack pointer

pop coppies and then increments

esp always points to a value not an empty spot
